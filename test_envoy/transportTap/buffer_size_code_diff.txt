diff --git a/api/contrib/envoy/extensions/tap_sinks/udp_sink/v3alpha/udp_sink.proto b/api/contrib/envoy/extensions/tap_sinks/udp_sink/v3alpha/udp_sink.proto
index d98f6b93f8..9a05f51806 100644
--- a/api/contrib/envoy/extensions/tap_sinks/udp_sink/v3alpha/udp_sink.proto
+++ b/api/contrib/envoy/extensions/tap_sinks/udp_sink/v3alpha/udp_sink.proto
@@ -1,22 +1,24 @@
 syntax = "proto3";
 
 package envoy.extensions.tap_sinks.udp_sink.v3alpha;
 
 import "envoy/config/core/v3/address.proto";
 
 import "udpa/annotations/status.proto";
+import "google/protobuf/wrappers.proto";
 
 option java_package = "io.envoyproxy.envoy.extensions.tap_sinks.udp_sink.v3alpha";
 option java_outer_classname = "UdpSinkProto";
 option java_multiple_files = true;
 option go_package = "github.com/envoyproxy/go-control-plane/contrib/envoy/extensions/tap_sinks/udp_sink/v3alpha";
 option (udpa.annotations.file_status).package_version_status = ACTIVE;
 
 // [#protodoc-title: Udp sink configuration]
 // [#extension: envoy.tap_sinks.udp_sink]
 
 // Udp sink configuration.
 message UdpSink {
   // Configure UDP Address.
   config.core.v3.SocketAddress udp_address = 1;
+  google.protobuf.UInt32Value estimated_max_one_udp_msg_bytes = 2;
 }
diff --git a/api/envoy/config/tap/v3/common.proto b/api/envoy/config/tap/v3/common.proto
index 126993d0f7..b5774a4f12 100644
--- a/api/envoy/config/tap/v3/common.proto
+++ b/api/envoy/config/tap/v3/common.proto
@@ -166,36 +166,37 @@ message OutputConfig {
   // truncation. If truncation occurs, the :ref:`truncated
   // <envoy_v3_api_field_data.tap.v3.Body.truncated>` field will be set. If not specified, the
   // default is 1KiB.
   google.protobuf.UInt32Value max_buffered_rx_bytes = 2;
 
   // For buffered tapping, the maximum amount of transmitted body that will be buffered prior to
   // truncation. If truncation occurs, the :ref:`truncated
   // <envoy_v3_api_field_data.tap.v3.Body.truncated>` field will be set. If not specified, the
   // default is 1KiB.
   google.protobuf.UInt32Value max_buffered_tx_bytes = 3;
 
   // Indicates whether taps produce a single buffered message per tap, or multiple streamed
   // messages per tap in the emitted :ref:`TraceWrapper
   // <envoy_v3_api_msg_data.tap.v3.TraceWrapper>` messages. Note that streamed tapping does not
   // mean that no buffering takes place. Buffering may be required if data is processed before a
   // match can be determined. See the HTTP tap filter :ref:`streaming
   // <config_http_filters_tap_streaming>` documentation for more information.
   bool streaming = 4;
+  google.protobuf.UInt32Value min_socket_buffered_submit_bytes = 5;
 }
 
 // Tap output sink configuration.
 // [#next-free-field: 7]
 message OutputSink {
   option (udpa.annotations.versioning).previous_message_type =
       "envoy.service.tap.v2alpha.OutputSink";
 
   // Output format. All output is in the form of one or more :ref:`TraceWrapper
   // <envoy_v3_api_msg_data.tap.v3.TraceWrapper>` messages. This enumeration indicates
   // how those messages are written. Note that not all sinks support all output formats. See
   // individual sink documentation for more information.
   enum Format {
     // Each message will be written as JSON. Any :ref:`body <envoy_v3_api_msg_data.tap.v3.Body>`
     // data will be present in the :ref:`as_bytes
     // <envoy_v3_api_field_data.tap.v3.Body.as_bytes>` field. This means that body data will be
     // base64 encoded as per the `proto3 JSON mappings
     // <https://developers.google.com/protocol-buffers/docs/proto3#json>`_.
diff --git a/api/envoy/data/tap/v3/transport.proto b/api/envoy/data/tap/v3/transport.proto
index 9338165058..7ff4c4bd43 100644
--- a/api/envoy/data/tap/v3/transport.proto
+++ b/api/envoy/data/tap/v3/transport.proto
@@ -50,36 +50,37 @@ message SocketEvent {
   message Closed {
     // TODO(mattklein123): Close event type.
 
     option (udpa.annotations.versioning).previous_message_type =
         "envoy.data.tap.v2alpha.SocketEvent.Closed";
   }
 
   // Timestamp for event.
   google.protobuf.Timestamp timestamp = 1;
 
   // Read or write with content as bytes string.
   oneof event_selector {
     Read read = 2;
 
     Write write = 3;
 
     Closed closed = 4;
   }
+  Connection connection_per_event = 5;
 }
 
 // Sequence of read/write events that constitute a buffered trace on a socket.
 // [#next-free-field: 6]
 message SocketBufferedTrace {
   option (udpa.annotations.versioning).previous_message_type =
       "envoy.data.tap.v2alpha.SocketBufferedTrace";
 
   // Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
   // for long term stable uniqueness. Matches connection IDs used in Envoy logs.
   uint64 trace_id = 1;
 
   // Connection properties.
   Connection connection = 2;
 
   // Sequence of observed events.
   repeated SocketEvent events = 3;
 
diff --git a/ci/do_ci.sh b/ci/do_ci.sh
index 0881dcac23..f36d7de45c 100755
--- a/ci/do_ci.sh
+++ b/ci/do_ci.sh
@@ -487,39 +487,39 @@ case $CI_TARGET in
     dev)
         setup_clang_toolchain
         # This doesn't go into CI but is available for developer convenience.
         echo "bazel fastbuild build with tests..."
         echo "Building..."
         bazel_envoy_binary_build fastbuild
         echo "Testing ${TEST_TARGETS[*]}"
         bazel test "${BAZEL_BUILD_OPTIONS[@]}" \
               -c fastbuild "${TEST_TARGETS[@]}"
         ;;
 
     dev.contrib)
         setup_clang_toolchain
         # This doesn't go into CI but is available for developer convenience.
         echo "bazel fastbuild build with contrib extensions and tests..."
         echo "Building..."
         bazel_contrib_binary_build fastbuild
         echo "Testing ${TEST_TARGETS[*]}"
-        bazel test "${BAZEL_BUILD_OPTIONS[@]}" \
-              -c fastbuild \
-              "${TEST_TARGETS[@]}"
+        #bazel test "${BAZEL_BUILD_OPTIONS[@]}" \
+        #      -c fastbuild \
+        #      "${TEST_TARGETS[@]}"
         ;;
 
     distribution)
         echo "Building distro packages..."
         setup_clang_toolchain
         # Extract the Envoy binary from the tarball
         mkdir -p distribution/custom
         if [[ "${ENVOY_BUILD_ARCH}" == "x86_64" ]]; then
             ENVOY_RELEASE_TARBALL="/build/release/x64/bin/release.tar.zst"
         else
             ENVOY_RELEASE_TARBALL="/build/release/arm64/bin/release.tar.zst"
         fi
 
         bazel run "${BAZEL_BUILD_OPTIONS[@]}" \
               //tools/zstd \
               -- --stdout \
                  -d "$ENVOY_RELEASE_TARBALL" \
             | tar xfO - envoy > distribution/custom/envoy
diff --git a/contrib/exe/BUILD b/contrib/exe/BUILD
index e9f3c7c266..5437572d48 100644
--- a/contrib/exe/BUILD
+++ b/contrib/exe/BUILD
@@ -19,36 +19,47 @@ envoy_contrib_package()
 alias(
     name = "envoy",
     actual = ":envoy-static",
 )
 
 SELECTED_CONTRIB_EXTENSIONS = select({
     "//bazel:linux_aarch64": envoy_all_contrib_extensions(ARM64_SKIP_CONTRIB_TARGETS),
     "//bazel:linux_ppc": envoy_all_contrib_extensions(PPC_SKIP_CONTRIB_TARGETS),
     "//bazel:boringssl_fips_x86": envoy_all_contrib_extensions(FIPS_LINUX_X86_SKIP_CONTRIB_TARGETS),
     "//conditions:default": envoy_all_contrib_extensions(),
 })
 
 envoy_cc_binary(
     name = "envoy-static",
     rbe_pool = "6gig",
     stamped = True,
     visibility = ["//visibility:public"],
     deps = ["//source/exe:envoy_main_entry_lib"] + SELECTED_CONTRIB_EXTENSIONS,
+    linkopts = [
+     "-pthread",
+     "-lrt",
+     "-ldl",
+     "-static",
+     "-lc",
+     "-lrt",
+     "-lpthread",
+     "-Wl,-z,relro,-z,now,-z,muldefs",
+     "-Wl,--hash-style=gnu",
+    ],
 )
 
 envoy_cc_test(
     name = "example_configs_test",
     size = "large",
     data = [
         "//configs:example_contrib_configs",
         "//test/config_test:example_configs_test_setup.sh",
     ],
     env = {
         "EXAMPLE_CONFIGS_TAR_PATH": "envoy/configs/example_contrib_configs.tar",
         "DISABLE_TEST_MERGE": "true",
         "GODEBUG": "cgocheck=0",
     },
     rbe_pool = "6gig",
     deps = [
         "//test/config_test:example_configs_test_lib",
     ] + SELECTED_CONTRIB_EXTENSIONS,
diff --git a/contrib/tap_sinks/udp_sink/source/udp_sink_impl.cc b/contrib/tap_sinks/udp_sink/source/udp_sink_impl.cc
index e7eb34a184..c5414f9f33 100644
--- a/contrib/tap_sinks/udp_sink/source/udp_sink_impl.cc
+++ b/contrib/tap_sinks/udp_sink/source/udp_sink_impl.cc
@@ -1,77 +1,85 @@
 #include "contrib/tap_sinks/udp_sink/source/udp_sink_impl.h"
 
 #include "source/common/common/assert.h"
 #include "source/common/network/utility.h"
 
 #include "contrib/envoy/extensions/tap_sinks/udp_sink/v3alpha/udp_sink.pb.validate.h"
 
 namespace Envoy {
 namespace Extensions {
 namespace TapSinks {
 namespace UDP {
 
 UdpTapSink::UdpTapSink(const envoy::extensions::tap_sinks::udp_sink::v3alpha::UdpSink& config)
-    : config_(config) {
+    : config_(config), max_one_udp_msg_bytes_(PROTOBUF_GET_WRAPPED_OR_DEFAULT(
+          config, estimated_max_one_udp_msg_bytes, default_max_one_udp_msg_bytes_)) {
   if (config_.udp_address().protocol() != envoy::config::core::v3::SocketAddress::UDP) {
     ENVOY_LOG_MISC(warn, "{}: Only suport UDP and invalid protocol", __func__);
     return;
   }
 
   // Verify the address (ipv4/ipv6).
   udp_server_address_ = Network::Utility::parseInternetAddressNoThrow(
       config_.udp_address().address(), static_cast<uint16_t>(config_.udp_address().port_value()),
       false);
   if (!udp_server_address_) {
     ENVOY_LOG_MISC(warn, "{}: Invalid configuration for address {} or port_value {}", __func__,
                    config_.udp_address().address().c_str(), config_.udp_address().port_value());
     return;
   }
 
   // Create socket.
   udp_socket_ =
       std::make_unique<Network::SocketImpl>(Network::Socket::Type::Datagram, udp_server_address_,
                                             nullptr, Network::SocketCreationOptions{});
 
   // Create udp writer.
   udp_packet_writer_ = std::make_unique<Network::UdpDefaultWriter>(udp_socket_->ioHandle());
   ENVOY_LOG_MISC(trace, "{}: UDP packet writer is created", __func__);
 }
 
 UdpTapSink::~UdpTapSink() { ENVOY_LOG_MISC(trace, "{}: UDP UdpTapSink() is called", __func__); }
 
 void UdpTapSink::UdpTapSinkHandle::submitTrace(TapCommon::TraceWrapperPtr&& trace,
                                                envoy::config::tap::v3::OutputSink::Format format) {
   switch (format) {
     PANIC_ON_PROTO_ENUM_SENTINEL_VALUES;
   case envoy::config::tap::v3::OutputSink::PROTO_BINARY:
     FALLTHRU;
   case envoy::config::tap::v3::OutputSink::PROTO_BINARY_LENGTH_DELIMITED:
-    FALLTHRU;
-  case envoy::config::tap::v3::OutputSink::PROTO_TEXT:
     // will implement above format if it is needed.
     ENVOY_LOG_MISC(debug,
                    "{}: Not support PROTO_BINARY, PROTO_BINARY_LENGTH_DELIMITED,  PROTO_TEXT",
                    __func__);
     break;
+  case envoy::config::tap::v3::OutputSink::PROTO_TEXT:
+    FALLTHRU;
   case envoy::config::tap::v3::OutputSink::JSON_BODY_AS_BYTES:
     FALLTHRU;
   case envoy::config::tap::v3::OutputSink::JSON_BODY_AS_STRING: {
     if (!parent_.isUdpPacketWriterCreated()) {
       ENVOY_LOG_MISC(debug, "{}: udp writter isn't created yet", __func__);
       break;
     }
-    std::string json_string = MessageUtil::getJsonStringFromMessageOrError(*trace, true, false);
+    std::string json_string;
+    json_string.reserve(parent_.max_one_udp_msg_bytes_);
+    if (format == envoy::config::tap::v3::OutputSink::PROTO_TEXT) {
+      json_string = MessageUtil::toTextProto(*trace);
+    } else {
+      json_string = MessageUtil::getJsonStringFromMessageOrError(*trace, true, false);
+    }
+    //ENVOY_LOG_MISC(debug, "{}: json_string.size()={}, max={}", __func__, json_string.size(), parent_.max_one_udp_msg_bytes_);
     Buffer::OwnedImpl udp_data(std::move(json_string));
     Api::IoCallUint64Result write_result =
         parent_.udp_packet_writer_->writePacket(udp_data, nullptr, *parent_.udp_server_address_);
     if (!write_result.ok()) {
       ENVOY_LOG_MISC(debug, "{}: Failed to send UDP packet!", __func__);
     }
   } break;
   }
 }
 
 } // namespace UDP
 } // namespace TapSinks
 } // namespace Extensions
 } // namespace Envoy
diff --git a/contrib/tap_sinks/udp_sink/source/udp_sink_impl.h b/contrib/tap_sinks/udp_sink/source/udp_sink_impl.h
index fca458f7e6..4cafc594b6 100644
--- a/contrib/tap_sinks/udp_sink/source/udp_sink_impl.h
+++ b/contrib/tap_sinks/udp_sink/source/udp_sink_impl.h
@@ -29,32 +29,35 @@ public:
     return std::make_unique<UdpTapSinkHandle>(*this, trace_id);
   }
   bool isUdpPacketWriterCreated(void) { return (udp_packet_writer_ != nullptr); }
 
 private:
   struct UdpTapSinkHandle : public TapCommon::PerTapSinkHandle {
     UdpTapSinkHandle(UdpTapSink& parent, uint64_t trace_id)
         : parent_(parent), trace_id_(trace_id) {}
 
     // PerTapSinkHandle
     void submitTrace(TapCommon::TraceWrapperPtr&& trace,
                      envoy::config::tap::v3::OutputSink::Format format) override;
 
     UdpTapSink& parent_;
     const uint64_t trace_id_;
   };
 
   const envoy::extensions::tap_sinks::udp_sink::v3alpha::UdpSink config_;
+  // The default size reserved for the string to store sending an UDP message
+  const uint32_t default_max_one_udp_msg_bytes_ = 4096;
+  const uint32_t max_one_udp_msg_bytes_;
   // Store the configured UDP address and port.
   Network::Address::InstanceConstSharedPtr udp_server_address_ = nullptr;
   // UDP client socket.
   Network::SocketPtr udp_socket_ = nullptr;
 
 protected:
   // UDP client writer created with client socket.
   Network::UdpPacketWriterPtr udp_packet_writer_ = nullptr;
 };
 
 } // namespace UDP
 } // namespace TapSinks
 } // namespace Extensions
 } // namespace Envoy
diff --git a/source/extensions/common/tap/tap.h b/source/extensions/common/tap/tap.h
index f19b80e3a5..5e720b27c5 100644
--- a/source/extensions/common/tap/tap.h
+++ b/source/extensions/common/tap/tap.h
@@ -147,36 +147,37 @@ public:
 
   /**
    * Return a per-tap sink handle manager for use by a tap session.
    * @param trace_id supplies a locally unique trace ID. Some sinks use this for output generation.
    */
   virtual PerTapSinkHandleManagerPtr createPerTapSinkHandleManager(uint64_t trace_id) PURE;
 
   /**
    * Return the maximum received bytes that can be buffered in memory. Streaming taps are still
    * subject to this limit depending on match status.
    */
   virtual uint32_t maxBufferedRxBytes() const PURE;
 
   /**
    * Return the maximum transmitted bytes that can be buffered in memory. Streaming taps are still
    * subject to this limit depending on match status.
    */
   virtual uint32_t maxBufferedTxBytes() const PURE;
+  virtual uint32_t minSocketBufferedSubmitBytes() const PURE;
 
   /**
    * Return a new match status vector that is correctly sized for the number of matchers that are in
    * the configuration.
    */
   virtual Matcher::MatchStatusVector createMatchStatusVector() const PURE;
 
   /**
    * Return the root matcher for use in updating a match status vector.
    */
   virtual const Matcher& rootMatcher() const PURE;
 
   /**
    * Non-const version of rootMatcher method.
    */
   Matcher& rootMatcher() {
     return const_cast<Matcher&>(static_cast<const TapConfig&>(*this).rootMatcher());
   }
diff --git a/source/extensions/common/tap/tap_config_base.cc b/source/extensions/common/tap/tap_config_base.cc
index f412c49738..bc30fc8db4 100644
--- a/source/extensions/common/tap/tap_config_base.cc
+++ b/source/extensions/common/tap/tap_config_base.cc
@@ -16,57 +16,58 @@
 namespace Envoy {
 namespace Extensions {
 namespace Common {
 namespace Tap {
 
 using namespace Matcher;
 
 bool Utility::addBufferToProtoBytes(envoy::data::tap::v3::Body& output_body,
                                     uint32_t max_buffered_bytes, const Buffer::Instance& data,
                                     uint32_t buffer_start_offset, uint32_t buffer_length_to_copy) {
   // TODO(mattklein123): Figure out if we can use the buffer API here directly in some way. This is
   // is not trivial if we want to avoid extra copies since we end up appending to the existing
   // protobuf string.
 
   // Note that max_buffered_bytes is assumed to include any data already contained in output_bytes.
   // This is to account for callers that may be tracking this over multiple body objects.
   ASSERT(buffer_start_offset + buffer_length_to_copy <= data.length());
   const uint32_t final_bytes_to_copy = std::min(max_buffered_bytes, buffer_length_to_copy);
-
   Buffer::RawSliceVector slices = data.getRawSlices();
   trimSlices(slices, buffer_start_offset, final_bytes_to_copy);
   for (const Buffer::RawSlice& slice : slices) {
     output_body.mutable_as_bytes()->append(static_cast<const char*>(slice.mem_), slice.len_);
   }
 
   if (final_bytes_to_copy < buffer_length_to_copy) {
     output_body.set_truncated(true);
     return true;
   } else {
     return false;
   }
 }
 
 TapConfigBaseImpl::TapConfigBaseImpl(const envoy::config::tap::v3::TapConfig& proto_config,
                                      Common::Tap::Sink* admin_streamer, SinkContext context)
     : max_buffered_rx_bytes_(PROTOBUF_GET_WRAPPED_OR_DEFAULT(
           proto_config.output_config(), max_buffered_rx_bytes, DefaultMaxBufferedBytes)),
       max_buffered_tx_bytes_(PROTOBUF_GET_WRAPPED_OR_DEFAULT(
           proto_config.output_config(), max_buffered_tx_bytes, DefaultMaxBufferedBytes)),
+      min_socket_buffered_submit_bytes_(PROTOBUF_GET_WRAPPED_OR_DEFAULT(
+          proto_config.output_config(), min_socket_buffered_submit_bytes, DefaultMaxBufferedBytes)),
       streaming_(proto_config.output_config().streaming()) {
 
   using TsfContextRef =
       std::reference_wrapper<Server::Configuration::TransportSocketFactoryContext>;
   using HttpContextRef = std::reference_wrapper<Server::Configuration::FactoryContext>;
   using ProtoOutputSink = envoy::config::tap::v3::OutputSink;
   auto& sinks = proto_config.output_config().sinks();
   ASSERT(sinks.size() == 1);
   // TODO(mattklein123): Add per-sink checks to make sure format makes sense. I.e., when using
   // streaming, we should require the length delimited version of binary proto, etc.
   sink_format_ = sinks[0].format();
   sink_type_ = sinks[0].output_sink_type_case();
 
   switch (sink_type_) {
   case ProtoOutputSink::OutputSinkTypeCase::kBufferedAdmin:
     if (admin_streamer == nullptr) {
       throw EnvoyException(fmt::format("Output sink type BufferedAdmin requires that the admin "
                                        "output will be configured via admin"));
diff --git a/source/extensions/common/tap/tap_config_base.h b/source/extensions/common/tap/tap_config_base.h
index aca6eb1cf4..36a8974c8a 100644
--- a/source/extensions/common/tap/tap_config_base.h
+++ b/source/extensions/common/tap/tap_config_base.h
@@ -80,53 +80,55 @@ public:
     PerTapSinkHandleManagerImpl(TapConfigBaseImpl& parent, uint64_t trace_id)
         : parent_(parent),
           handle_(parent.sink_to_use_->createPerTapSinkHandle(trace_id, parent.sink_type_)) {}
 
     // PerTapSinkHandleManager
     void submitTrace(TraceWrapperPtr&& trace) override;
 
   private:
     TapConfigBaseImpl& parent_;
     PerTapSinkHandlePtr handle_;
   };
 
   // TapConfig
   PerTapSinkHandleManagerPtr createPerTapSinkHandleManager(uint64_t trace_id) override {
     return std::make_unique<PerTapSinkHandleManagerImpl>(*this, trace_id);
   }
   uint32_t maxBufferedRxBytes() const override { return max_buffered_rx_bytes_; }
   uint32_t maxBufferedTxBytes() const override { return max_buffered_tx_bytes_; }
+  uint32_t minSocketBufferedSubmitBytes() const override { return min_socket_buffered_submit_bytes_; }
   Matcher::MatchStatusVector createMatchStatusVector() const override {
     return Matcher::MatchStatusVector(matchers_.size());
   }
   const Matcher& rootMatcher() const override;
   bool streaming() const override { return streaming_; }
 
 protected:
   TapConfigBaseImpl(const envoy::config::tap::v3::TapConfig& proto_config,
                     Common::Tap::Sink* admin_streamer, SinkContext context);
 
 private:
   // This is the default setting for both RX/TX max buffered bytes. (This means that per tap, the
   // maximum amount that can be buffered is 2x this value).
   static constexpr uint32_t DefaultMaxBufferedBytes = 1024;
 
   const uint32_t max_buffered_rx_bytes_;
   const uint32_t max_buffered_tx_bytes_;
+  const uint32_t min_socket_buffered_submit_bytes_;
   const bool streaming_;
   Sink* sink_to_use_;
   SinkPtr sink_;
   envoy::config::tap::v3::OutputSink::Format sink_format_;
   envoy::config::tap::v3::OutputSink::OutputSinkTypeCase sink_type_;
   std::vector<MatcherPtr> matchers_;
 };
 
 /**
  * A tap sink that writes each tap trace to a discrete output file.
  */
 class FilePerTapSink : public Sink {
 public:
   FilePerTapSink(const envoy::config::tap::v3::FilePerTapSink& config) : config_(config) {}
 
   // Sink
   PerTapSinkHandlePtr
   createPerTapSinkHandle(uint64_t trace_id,
diff --git a/source/extensions/transport_sockets/tap/tap_config_impl.cc b/source/extensions/transport_sockets/tap/tap_config_impl.cc
index 163224e0ae..4c1dec85fb 100644
--- a/source/extensions/transport_sockets/tap/tap_config_impl.cc
+++ b/source/extensions/transport_sockets/tap/tap_config_impl.cc
@@ -1,139 +1,200 @@
 #include "source/extensions/transport_sockets/tap/tap_config_impl.h"
 
 #include "envoy/data/tap/v3/transport.pb.h"
 
 #include "source/common/common/assert.h"
 #include "source/common/network/utility.h"
 
+#include "source/server/backtrace.h"
+
 namespace Envoy {
 namespace Extensions {
 namespace TransportSockets {
 namespace Tap {
 
 namespace TapCommon = Extensions::Common::Tap;
 
 PerSocketTapperImpl::PerSocketTapperImpl(SocketTapConfigSharedPtr config,
                                          const Network::Connection& connection)
     : config_(std::move(config)),
       sink_handle_(config_->createPerTapSinkHandleManager(connection.id())),
       connection_(connection), statuses_(config_->createMatchStatusVector()) {
   config_->rootMatcher().onNewStream(statuses_);
+  //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl");
+   //     BackwardsTrace t;
+    //    t.capture();
+     //   t.logTrace();
+
   if (config_->streaming() && config_->rootMatcher().matchStatus(statuses_).matches_) {
     // TODO(mattklein123): For IP client connections, local address will not be populated until
     // connection. We should re-emit connection information after connection so the streaming
     // trace gets the local address.
     TapCommon::TraceWrapperPtr trace = makeTraceSegment();
     fillConnectionInfo(*trace->mutable_socket_streamed_trace_segment()->mutable_connection());
     sink_handle_->submitTrace(std::move(trace));
   }
 }
 
 void PerSocketTapperImpl::fillConnectionInfo(envoy::data::tap::v3::Connection& connection) {
+  //ENVOY_LOG_MISC(critical, "CFX:fillConnectionInfo::enter");
+  if (connection.local_address().address_case() == envoy::config::core::v3::Address::AddressCase::ADDRESS_NOT_SET) {
+  //ENVOY_LOG_MISC(critical, "CFX:fillConnectionInfo::no local address");
   if (connection_.connectionInfoProvider().localAddress() != nullptr) {
+    //ENVOY_LOG_MISC(critical, "CFX:fillConnectionInfo::*****fill local address");
     // Local address might not be populated before a client connection is connected.
     Network::Utility::addressToProtobufAddress(*connection_.connectionInfoProvider().localAddress(),
                                                *connection.mutable_local_address());
   }
+  }
+  if (connection.remote_address().address_case() == envoy::config::core::v3::Address::AddressCase::ADDRESS_NOT_SET) {
+  //ENVOY_LOG_MISC(critical, "CFX:fillConnectionInfo::****** fill remote address");
   Network::Utility::addressToProtobufAddress(*connection_.connectionInfoProvider().remoteAddress(),
                                              *connection.mutable_remote_address());
+  }
 }
 
 void PerSocketTapperImpl::closeSocket(Network::ConnectionEvent) {
+  //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::closeSocket::enter");
   if (!config_->rootMatcher().matchStatus(statuses_).matches_) {
     return;
   }
 
+  //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::closeSocket::enterB");
   if (config_->streaming()) {
     TapCommon::TraceWrapperPtr trace = makeTraceSegment();
     auto& event = *trace->mutable_socket_streamed_trace_segment()->mutable_event();
     initEvent(event);
     event.mutable_closed();
     sink_handle_->submitTrace(std::move(trace));
   } else {
+  	//ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::closeSocket::Buffer_trace");
+        //ENVOY_LOG_MISC(critical, "CFX:Close::Trye to make event");
     makeBufferedTraceIfNeeded();
+    auto& event = *buffered_trace_->mutable_socket_buffered_trace()->add_events();
+    initEvent(event);
+    event.mutable_closed();
     fillConnectionInfo(*buffered_trace_->mutable_socket_buffered_trace()->mutable_connection());
+    //ENVOY_LOG_MISC(critical, "CFX:Close::Before submit");
     sink_handle_->submitTrace(std::move(buffered_trace_));
+    //ENVOY_LOG_MISC(critical, "CFX:Close::After submit");
   }
 
   // Here we explicitly reset the sink_handle_ to release any sink resources and force a flush
   // of any data (e.g., files). This is not explicitly needed in production, but is needed in
   // tests to avoid race conditions due to deferred deletion. We could also do this with a stat,
   // but this seems fine in general and is simpler.
   sink_handle_.reset();
 }
 
 void PerSocketTapperImpl::initEvent(envoy::data::tap::v3::SocketEvent& event) {
   event.mutable_timestamp()->MergeFrom(Protobuf::util::TimeUtil::NanosecondsToTimestamp(
       std::chrono::duration_cast<std::chrono::nanoseconds>(
           config_->timeSource().systemTime().time_since_epoch())
           .count()));
+  //if (config_->minSocketBufferedSubmitBytes()) {
+  //	fillConnectionInfo(*event.mutable_connection_per_event());
+  //}
 }
 
 void PerSocketTapperImpl::onRead(const Buffer::Instance& data, uint32_t bytes_read) {
   if (!config_->rootMatcher().matchStatus(statuses_).matches_) {
     return;
   }
 
   if (config_->streaming()) {
     TapCommon::TraceWrapperPtr trace = makeTraceSegment();
     auto& event = *trace->mutable_socket_streamed_trace_segment()->mutable_event();
     initEvent(event);
     TapCommon::Utility::addBufferToProtoBytes(*event.mutable_read()->mutable_data(),
                                               config_->maxBufferedRxBytes(), data,
                                               data.length() - bytes_read, bytes_read);
     sink_handle_->submitTrace(std::move(trace));
   } else {
     if (buffered_trace_ != nullptr && buffered_trace_->socket_buffered_trace().read_truncated()) {
       return;
     }
 
+  //ENVOY_LOG_MISC(critical, "CFX:onRead::Try to make event");
     makeBufferedTraceIfNeeded();
     auto& event = *buffered_trace_->mutable_socket_buffered_trace()->add_events();
     initEvent(event);
     ASSERT(rx_bytes_buffered_ <= config_->maxBufferedRxBytes());
     buffered_trace_->mutable_socket_buffered_trace()->set_read_truncated(
         TapCommon::Utility::addBufferToProtoBytes(*event.mutable_read()->mutable_data(),
                                                   config_->maxBufferedRxBytes() -
                                                       rx_bytes_buffered_,
                                                   data, data.length() - bytes_read, bytes_read));
     rx_bytes_buffered_ += event.read().data().as_bytes().size();
+    rx_event_cnt_++;
+    event_cnt_++;
+    curr_bytes_buffered_ += event.read().data().as_bytes().size();
+    //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onRead, rx_bytes_buffered_={}, rx_event_cnt_={}, event_cnt_={}, curr_bytes_buffered_={}, maxBufferedRxBytes={}, bytes_read={} , event_read={}, minSocketBufferedSubmitBytes={}", rx_bytes_buffered_, rx_event_cnt_, event_cnt_, curr_bytes_buffered_, config_->maxBufferedRxBytes(), bytes_read, event.read().data().as_bytes().size(), config_->minSocketBufferedSubmitBytes());
+    if (curr_bytes_buffered_ > config_->minSocketBufferedSubmitBytes()) {
+    	//ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onRead, try to send");
+//	if (config_->minSocketBufferedSubmitBytes() <= 0) {
+          //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onRead, fillConnectionInfo");
+          fillConnectionInfo(*buffered_trace_->mutable_socket_buffered_trace()->mutable_connection());
+//	}
+
+    sink_handle_->submitTrace(std::move(buffered_trace_));
+    buffered_trace_.reset();
+    if (buffered_trace_ == nullptr) {
+      //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onRead, buffered_trace_ is null after move");
+    }
+    else {
+      //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onRead, buffered_trace_ is Not null after move");
+    }
+    curr_bytes_buffered_ = 0;
+    event_cnt_= 0;
+    rx_bytes_buffered_=0;
+    rx_event_cnt_ =0;
+    tx_bytes_buffered_=0;
+    tx_event_cnt_ =0;
+    }
   }
 }
 
 void PerSocketTapperImpl::onWrite(const Buffer::Instance& data, uint32_t bytes_written,
                                   bool end_stream) {
   if (!config_->rootMatcher().matchStatus(statuses_).matches_) {
     return;
   }
 
   if (config_->streaming()) {
     TapCommon::TraceWrapperPtr trace = makeTraceSegment();
     auto& event = *trace->mutable_socket_streamed_trace_segment()->mutable_event();
     initEvent(event);
     TapCommon::Utility::addBufferToProtoBytes(*event.mutable_write()->mutable_data(),
                                               config_->maxBufferedTxBytes(), data, 0,
                                               bytes_written);
     event.mutable_write()->set_end_stream(end_stream);
     sink_handle_->submitTrace(std::move(trace));
   } else {
     if (buffered_trace_ != nullptr && buffered_trace_->socket_buffered_trace().write_truncated()) {
       return;
     }
 
+  //ENVOY_LOG_MISC(critical, "CFX:onWrite::Trye to make event");
     makeBufferedTraceIfNeeded();
     auto& event = *buffered_trace_->mutable_socket_buffered_trace()->add_events();
     initEvent(event);
     ASSERT(tx_bytes_buffered_ <= config_->maxBufferedTxBytes());
     buffered_trace_->mutable_socket_buffered_trace()->set_write_truncated(
         TapCommon::Utility::addBufferToProtoBytes(
             *event.mutable_write()->mutable_data(),
             config_->maxBufferedTxBytes() - tx_bytes_buffered_, data, 0, bytes_written));
     tx_bytes_buffered_ += event.write().data().as_bytes().size();
     event.mutable_write()->set_end_stream(end_stream);
+    curr_bytes_buffered_ += event.write().data().as_bytes().size();
+    tx_event_cnt_++;
+    event_cnt_++;
+    //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onWrite, fillConnectionInfo");
+    //fillConnectionInfo(*buffered_trace_->mutable_socket_buffered_trace()->mutable_connection());
+    //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::onWrite, tx_bytes_buffered_={}, tx_event_cnt_={}, event_cnt_={}, curr_bytes_buffered_={}, maxBufferedTxBytes={}, bytes_written ={}, real_w={}", tx_bytes_buffered_, tx_event_cnt_, event_cnt_, curr_bytes_buffered_, config_->maxBufferedTxBytes(), bytes_written, event.write().data().as_bytes().size());
   }
 }
 
 } // namespace Tap
 } // namespace TransportSockets
 } // namespace Extensions
 } // namespace Envoy
diff --git a/source/extensions/transport_sockets/tap/tap_config_impl.h b/source/extensions/transport_sockets/tap/tap_config_impl.h
index 38556025c1..af7712b71b 100644
--- a/source/extensions/transport_sockets/tap/tap_config_impl.h
+++ b/source/extensions/transport_sockets/tap/tap_config_impl.h
@@ -12,54 +12,59 @@ namespace Envoy {
 namespace Extensions {
 namespace TransportSockets {
 namespace Tap {
 
 class PerSocketTapperImpl : public PerSocketTapper {
 public:
   PerSocketTapperImpl(SocketTapConfigSharedPtr config, const Network::Connection& connection);
 
   // PerSocketTapper
   void closeSocket(Network::ConnectionEvent event) override;
   void onRead(const Buffer::Instance& data, uint32_t bytes_read) override;
   void onWrite(const Buffer::Instance& data, uint32_t bytes_written, bool end_stream) override;
 
 private:
   void initEvent(envoy::data::tap::v3::SocketEvent&);
   void fillConnectionInfo(envoy::data::tap::v3::Connection& connection);
   void makeBufferedTraceIfNeeded() {
     if (buffered_trace_ == nullptr) {
+	    //ENVOY_LOG_MISC(critical, "CFX:PerSocketTapperImpl::makeBufferedTraceIfNeeded()");
       buffered_trace_ = Extensions::Common::Tap::makeTraceWrapper();
       buffered_trace_->mutable_socket_buffered_trace()->set_trace_id(connection_.id());
     }
   }
   Extensions::Common::Tap::TraceWrapperPtr makeTraceSegment() {
     Extensions::Common::Tap::TraceWrapperPtr trace = Extensions::Common::Tap::makeTraceWrapper();
     trace->mutable_socket_streamed_trace_segment()->set_trace_id(connection_.id());
     return trace;
   }
 
   SocketTapConfigSharedPtr config_;
   Extensions::Common::Tap::PerTapSinkHandleManagerPtr sink_handle_;
   const Network::Connection& connection_;
   Extensions::Common::Tap::Matcher::MatchStatusVector statuses_;
   // Must be a shared_ptr because of submitTrace().
   Extensions::Common::Tap::TraceWrapperPtr buffered_trace_;
   uint32_t rx_bytes_buffered_{};
   uint32_t tx_bytes_buffered_{};
+  uint32_t curr_bytes_buffered_{};
+  uint32_t rx_event_cnt_{};
+  uint32_t tx_event_cnt_{};
+  uint32_t event_cnt_{};
 };
 
 class SocketTapConfigImpl : public Extensions::Common::Tap::TapConfigBaseImpl,
                             public SocketTapConfig,
                             public std::enable_shared_from_this<SocketTapConfigImpl> {
 public:
   SocketTapConfigImpl(const envoy::config::tap::v3::TapConfig& proto_config,
                       Extensions::Common::Tap::Sink* admin_streamer, TimeSource& time_system,
                       Server::Configuration::TransportSocketFactoryContext& context)
       : Extensions::Common::Tap::TapConfigBaseImpl(std::move(proto_config), admin_streamer,
                                                    context),
         time_source_(time_system) {}
 
   // SocketTapConfig
   PerSocketTapperPtr createPerSocketTapper(const Network::Connection& connection) override {
     return std::make_unique<PerSocketTapperImpl>(shared_from_this(), connection);
   }
   TimeSource& timeSource() const override { return time_source_; }
