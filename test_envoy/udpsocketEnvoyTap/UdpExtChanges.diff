diff --git a/api/BUILD b/api/BUILD
index 459e54f3c1..f65bf527f4 100644
--- a/api/BUILD
+++ b/api/BUILD
@@ -330,6 +330,7 @@ proto_library(
         "//envoy/extensions/stat_sinks/open_telemetry/v3:pkg",
         "//envoy/extensions/stat_sinks/wasm/v3:pkg",
         "//envoy/extensions/string_matcher/lua/v3:pkg",
+        "//envoy/extensions/tap_sinks/udp_sink/v3:pkg",
         "//envoy/extensions/tracers/opentelemetry/resource_detectors/v3:pkg",
         "//envoy/extensions/tracers/opentelemetry/samplers/v3:pkg",
         "//envoy/extensions/transport_sockets/alts/v3:pkg",
diff --git a/api/envoy/extensions/tap_sinks/udp_sink/v3/BUILD b/api/envoy/extensions/tap_sinks/udp_sink/v3/BUILD
new file mode 100644
index 0000000000..09a37ad16b
--- /dev/null
+++ b/api/envoy/extensions/tap_sinks/udp_sink/v3/BUILD
@@ -0,0 +1,12 @@
+# DO NOT EDIT. This file is generated by tools/proto_format/proto_sync.py.
+
+load("@envoy_api//bazel:api_build_system.bzl", "api_proto_package")
+
+licenses(["notice"])  # Apache 2
+
+api_proto_package(
+    deps = [
+        "//envoy/config/core/v3:pkg",
+        "@com_github_cncf_xds//udpa/annotations:pkg",
+    ],
+)
diff --git a/api/envoy/extensions/tap_sinks/udp_sink/v3/udp_sink.proto b/api/envoy/extensions/tap_sinks/udp_sink/v3/udp_sink.proto
new file mode 100644
index 0000000000..616e5b9d9b
--- /dev/null
+++ b/api/envoy/extensions/tap_sinks/udp_sink/v3/udp_sink.proto
@@ -0,0 +1,23 @@
+syntax = "proto3";
+
+package envoy.extensions.tap_sinks.udp_sink.v3;
+
+import "envoy/config/core/v3/address.proto";
+
+import "udpa/annotations/status.proto";
+
+option java_package = "io.envoyproxy.envoy.extensions.tap_sinks.udp_sink.v3";
+option java_outer_classname = "UdpSinkProto";
+option java_multiple_files = true;
+option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/tap_sinks/udp_sink/v3;udp_sinkv3";
+option (udpa.annotations.file_status).package_version_status = ACTIVE;
+
+// [#protodoc-title: Udp sink configuration]
+// [#extension: envoy.tap_sinks.udp_sink]
+
+// Udp sink configuration.
+message UdpSink {
+  //   Configure UDP Address
+  //   
+  config.core.v3.SocketAddress udp_address = 1;
+}
diff --git a/ci/do_ci.sh b/ci/do_ci.sh
index 1b743e1fb0..7418e4fa92 100755
--- a/ci/do_ci.sh
+++ b/ci/do_ci.sh
@@ -502,9 +502,9 @@ case $CI_TARGET in
         echo "bazel fastbuild build with tests..."
         echo "Building..."
         bazel_envoy_binary_build fastbuild
-        echo "Testing ${TEST_TARGETS[*]}"
-        bazel test "${BAZEL_BUILD_OPTIONS[@]}" \
-              -c fastbuild "${TEST_TARGETS[@]}"
+        #echo "Testing ${TEST_TARGETS[*]}"
+        #bazel test "${BAZEL_BUILD_OPTIONS[@]}" \
+        #      -c fastbuild "${TEST_TARGETS[@]}"
         ;;
 
     dev.contrib)
diff --git a/docs/root/api-v3/config/config.rst b/docs/root/api-v3/config/config.rst
index b425c6e684..9fc06482d4 100644
--- a/docs/root/api-v3/config/config.rst
+++ b/docs/root/api-v3/config/config.rst
@@ -42,6 +42,7 @@ Extensions
   retry/retry
   stat_sinks/stat_sinks
   string_matcher/string_matcher
+  tap_sinks/udp_sink
   transport_socket/transport_socket
   upstream/upstream
   wasm/wasm
diff --git a/docs/root/api-v3/config/tap_sinks/tap_sinks.rst b/docs/root/api-v3/config/tap_sinks/tap_sinks.rst
new file mode 100644
index 0000000000..fa60a06c97
--- /dev/null
+++ b/docs/root/api-v3/config/tap_sinks/tap_sinks.rst
@@ -0,0 +1,8 @@
+Transport sockets
+=================
+
+.. toctree::
+  :glob:
+  :maxdepth: 2
+
+  ../../extensions/tap_sinks/*/v3/*
diff --git a/source/extensions/common/tap/BUILD b/source/extensions/common/tap/BUILD
index ac01f746bf..de8d839d38 100644
--- a/source/extensions/common/tap/BUILD
+++ b/source/extensions/common/tap/BUILD
@@ -34,6 +34,7 @@ envoy_cc_library(
         "//source/extensions/common/matcher:matcher_lib",
         "@envoy_api//envoy/config/tap/v3:pkg_cc_proto",
         "@envoy_api//envoy/data/tap/v3:pkg_cc_proto",
+        "@envoy_api//envoy/extensions/tap_sinks/udp_sink/v3:pkg_cc_proto",
     ],
 )
 
diff --git a/source/extensions/common/tap/tap.h b/source/extensions/common/tap/tap.h
index 973cae7fbd..46ca8c02fb 100644
--- a/source/extensions/common/tap/tap.h
+++ b/source/extensions/common/tap/tap.h
@@ -94,7 +94,9 @@ public:
    * @param config supplies the protobuf configuration for the sink factory
    * @param cluster_manager is a ClusterManager from the HTTP/transport socket context
    */
-  virtual SinkPtr createSinkPtr(const Protobuf::Message& config, SinkContext context) PURE;
+  //virtual SinkPtr createSinkPtr(const Protobuf::Message& config, SinkContext context) PURE;
+  virtual SinkPtr createSinkPtr(const Protobuf::Message& config, Server::Configuration::TransportSocketFactoryContext& tsf_context) PURE;
+  virtual SinkPtr createSinkPtr(const Protobuf::Message& config, Server::Configuration::FactoryContext& http_context) PURE;
 };
 
 using TapSinkFactoryPtr = std::unique_ptr<TapSinkFactory>;
diff --git a/source/extensions/common/tap/tap_config_base.cc b/source/extensions/common/tap/tap_config_base.cc
index 4b9f6df4d7..320a9a7fa9 100644
--- a/source/extensions/common/tap/tap_config_base.cc
+++ b/source/extensions/common/tap/tap_config_base.cc
@@ -3,6 +3,7 @@
 #include "envoy/config/tap/v3/common.pb.h"
 #include "envoy/data/tap/v3/common.pb.h"
 #include "envoy/data/tap/v3/wrapper.pb.h"
+#include "envoy/extensions/tap_sinks/udp_sink/v3/udp_sink.pb.validate.h"
 #include "envoy/server/transport_socket_config.h"
 
 #include "source/common/common/assert.h"
@@ -99,9 +100,9 @@ TapConfigBaseImpl::TapConfigBaseImpl(const envoy::config::tap::v3::TapConfig& pr
     sink_to_use_ = sink_.get();
     break;
   case ProtoOutputSink::OutputSinkTypeCase::kUdpSink: {
-    sink_ = std::make_unique<UdpTapSink>(sinks[0].udp_sink());
-    sink_to_use_ = sink_.get();
-    ENVOY_LOG_MISC(debug, "Done init UDP sink configured data");
+    //sink_ = std::make_unique<UdpTapSink>(sinks[0].udp_sink());
+    //sink_to_use_ = sink_.get();
+    ENVOY_LOG_MISC(debug, "Done init UDP sink configure data");
   } break;
   case ProtoOutputSink::OutputSinkTypeCase::kCustomSink: {
     TapSinkFactory& tap_sink_factory =
@@ -110,21 +111,24 @@ TapConfigBaseImpl::TapConfigBaseImpl(const envoy::config::tap::v3::TapConfig& pr
     // extract message validation visitor from the context and use it to define config
     ProtobufTypes::MessagePtr config;
     if (absl::holds_alternative<TsfContextRef>(context)) {
+      ENVOY_LOG_MISC(debug, "{}: Transport socket context", __func__);
       Server::Configuration::TransportSocketFactoryContext& tsf_context =
           absl::get<TsfContextRef>(context).get();
       config = Config::Utility::translateAnyToFactoryConfig(sinks[0].custom_sink().typed_config(),
                                                             tsf_context.messageValidationVisitor(),
                                                             tap_sink_factory);
+      sink_ = tap_sink_factory.createSinkPtr(*config, tsf_context);
     } else {
+      ENVOY_LOG_MISC(debug, "{}: HTTP context", __func__);
       Server::Configuration::FactoryContext& http_context =
           absl::get<HttpContextRef>(context).get();
       config = Config::Utility::translateAnyToFactoryConfig(
           sinks[0].custom_sink().typed_config(),
           http_context.serverFactoryContext().messageValidationContext().staticValidationVisitor(),
           tap_sink_factory);
+      sink_ = tap_sink_factory.createSinkPtr(*config, http_context);
     }
 
-    sink_ = tap_sink_factory.createSinkPtr(*config, context);
     sink_to_use_ = sink_.get();
     break;
   }
@@ -283,7 +287,9 @@ void FilePerTapSink::FilePerTapSinkHandle::submitTrace(
 }
 
 // The implemented code for UDP sink
-UdpTapSink::UdpTapSink(const envoy::config::tap::v3::UDPSink& config) : config_(config) {
+// UdpTapSink::UdpTapSink(const envoy::config::tap::v3::UDPSink& config) : config_(config) {
+UdpTapSink::UdpTapSink(const envoy::extensions::tap_sinks::udp_sink::v3::UdpSink& config)
+    : config_(config) {
   if (config_.udp_address().protocol() != envoy::config::core::v3::SocketAddress::UDP) {
     ENVOY_LOG_MISC(warn, "{}: Only suport UDP and invalid protocol", __func__);
     return;
@@ -306,6 +312,7 @@ UdpTapSink::UdpTapSink(const envoy::config::tap::v3::UDPSink& config) : config_(
 
   // Create udp writer
   udp_packet_writer_ = std::make_unique<Network::UdpDefaultWriter>(udp_socket_->ioHandle());
+  ENVOY_LOG_MISC(debug, "{}: UDP packet writer is created", __func__); 
 }
 
 UdpTapSink::~UdpTapSink() { ENVOY_LOG_MISC(warn, "{}: UDP UdpTapSink() is called", __func__); }
@@ -341,6 +348,28 @@ void UdpTapSink::UdpTapSinkHandle::submitTrace(TraceWrapperPtr&& trace,
   }
   return;
 }
+/*
+SinkPtr UdpTapSinkFactory::createSinkPtr(const Protobuf::Message& config, SinkContext context) {
+  (void)context;
+  //auto udp_sink_config = static_cast<envoy::extensions::tap_sinks::udp_sink::v3::UDPSink>(config);
+  const auto& udp_sink_config = *dynamic_cast<envoy::extensions::tap_sinks::udp_sink::v3::UDPSink*>(&config);
+  return std::make_unique<UdpTapSink>(udp_sink_config);
+  //return std::make_unique<UdpTapSink>(MessageUtil::downcastAndValidate<const envoy::extensions::tap_sinks::udp_sink::v3::UDPSink&>(config, context.messageValidationVisitor()));
+  //envoy/server/factory_context.h kkk
+  //return std::make_unique<UdpTapSink>(MessageUtil::downcastAndValidate<const envoy::extensions::tap_sinks::udp_sink::v3::UDPSink&>(config, context.messageValidationContext()));
+}
+*/
+SinkPtr UdpTapSinkFactory::createSinkPtr(const Protobuf::Message& config, Server::Configuration::TransportSocketFactoryContext& tsf_context) {
+  ENVOY_LOG_MISC(debug, "{}: Create UDP sink in transport context", __func__);
+  return std::make_unique<UdpTapSink>(MessageUtil::downcastAndValidate<const envoy::extensions::tap_sinks::udp_sink::v3::UdpSink&>(config, tsf_context.messageValidationVisitor()));
+}
+
+SinkPtr UdpTapSinkFactory::createSinkPtr(const Protobuf::Message& config, Server::Configuration::FactoryContext& http_context) {
+  ENVOY_LOG_MISC(debug, "{}: Create UDP sink in http context", __func__);
+  return std::make_unique<UdpTapSink>(MessageUtil::downcastAndValidate<const envoy::extensions::tap_sinks::udp_sink::v3::UdpSink&>(config, http_context.serverFactoryContext().messageValidationContext().staticValidationVisitor()));
+}
+
+REGISTER_FACTORY(UdpTapSinkFactory, TapSinkFactory);
 // The end of UDP sink
 
 } // namespace Tap
diff --git a/source/extensions/common/tap/tap_config_base.h b/source/extensions/common/tap/tap_config_base.h
index 6e7a373790..f487e0fc00 100644
--- a/source/extensions/common/tap/tap_config_base.h
+++ b/source/extensions/common/tap/tap_config_base.h
@@ -6,6 +6,7 @@
 #include "envoy/config/tap/v3/common.pb.h"
 #include "envoy/data/tap/v3/common.pb.h"
 #include "envoy/data/tap/v3/wrapper.pb.h"
+#include "envoy/extensions/tap_sinks/udp_sink/v3/udp_sink.pb.h"
 
 #include "source/common/network/socket_impl.h"
 #include "source/common/network/socket_interface.h"
@@ -158,7 +159,8 @@ private:
 // UDP sink definition
 class UdpTapSink : public Sink {
 public:
-  UdpTapSink(const envoy::config::tap::v3::UDPSink& config);
+  // UdpTapSink(const envoy::config::tap::v3::UdpSink& config);
+  UdpTapSink(const envoy::extensions::tap_sinks::udp_sink::v3::UdpSink& config);
   // below one is only for UT
   UdpTapSink(Network::UdpPacketWriterPtr&& utUdpPacketWriter)
       : udp_packet_writer_(std::move(utUdpPacketWriter)) {
@@ -190,7 +192,8 @@ private:
     const uint64_t trace_id_;
   };
 
-  const envoy::config::tap::v3::UDPSink config_;
+  // const envoy::config::tap::v3::UDPSink config_;
+  const envoy::extensions::tap_sinks::udp_sink::v3::UdpSink config_;
 
   // Store the configured UDP address and port
   Network::Address::InstanceConstSharedPtr udp_server_address_ = nullptr;
@@ -199,7 +202,27 @@ private:
   // UDP client writer created with client socket
   Network::UdpPacketWriterPtr udp_packet_writer_ = nullptr;
 };
+
 // The end of UDP sink
+// The UDP sink factory
+class UdpTapSinkFactory : public TapSinkFactory {
+public:
+  ~UdpTapSinkFactory() override = default;
+  std::string category() const override { return "envoy.tap.sinks.udp"; }
+  std::string name() const override { return "envoy.tap.sinks.udp"; }
+  ProtobufTypes::MessagePtr createEmptyConfigProto() override {
+    return std::make_unique<envoy::extensions::tap_sinks::udp_sink::v3::UdpSink>();
+  }
+  /**
+   * Create a UDP Sink that can be used for writing out data produced by the tap filter.
+   * @param config supplies the protobuf configuration for the sink factory
+   * @param cluster_manager is a ClusterManager from the HTTP/transport socket context
+   */
+  //SinkPtr createSinkPtr(const Protobuf::Message& config, SinkContext context) override;
+  SinkPtr createSinkPtr(const Protobuf::Message& config, Server::Configuration::TransportSocketFactoryContext& tsf_context) override;
+  SinkPtr createSinkPtr(const Protobuf::Message& config, Server::Configuration::FactoryContext& http_context) override;
+};
+// The end UDP sink factory
 
 } // namespace Tap
 } // namespace Common
diff --git a/source/extensions/extensions_build_config.bzl b/source/extensions/extensions_build_config.bzl
index 8a00f28108..6ecb00d22b 100644
--- a/source/extensions/extensions_build_config.bzl
+++ b/source/extensions/extensions_build_config.bzl
@@ -271,6 +271,12 @@ EXTENSIONS = {
     "envoy.filters.thrift.payload_to_metadata":         "//source/extensions/filters/network/thrift_proxy/filters/payload_to_metadata:config",
     "envoy.filters.thrift.rate_limit":                  "//source/extensions/filters/network/thrift_proxy/filters/ratelimit:config",
 
+    #
+    # Tap Sink
+    #
+
+    #"envoy.tap_sinks.udp_sink":                            "//source/extensions/tap_sinks/udp_sink:config",
+
     #
     # Tracers
     #
diff --git a/source/extensions/extensions_metadata.yaml b/source/extensions/extensions_metadata.yaml
index af8263b0c6..906a652ec1 100644
--- a/source/extensions/extensions_metadata.yaml
+++ b/source/extensions/extensions_metadata.yaml
@@ -1203,6 +1203,14 @@ envoy.string_matcher.lua:
   status: alpha
   type_urls:
   - envoy.extensions.string_matcher.lua.v3.Lua
+envoy.tap_sinks.udp_sink:
+  categories:
+  - envoy.transport_sockets.downstream
+  - envoy.transport_sockets.upstream
+  security_posture: requires_trusted_downstream_and_upstream
+  status: stable
+  type_urls:
+  - envoy.extensions.tap_sinks.udp_sink.v3.UdpSink
 envoy.tls.cert_validator.spiffe:
   categories:
   - envoy.tls.cert_validator
diff --git a/tools/extensions/extensions_schema.yaml b/tools/extensions/extensions_schema.yaml
index c8f589a5fa..f6755ed8f1 100644
--- a/tools/extensions/extensions_schema.yaml
+++ b/tools/extensions/extensions_schema.yaml
@@ -140,6 +140,7 @@ categories:
 - envoy.http.early_header_mutation
 - envoy.http.custom_response
 - envoy.router.cluster_specifier_plugin
+- envoy.tap_sinks.udp_sink
 - envoy.tracers.opentelemetry.resource_detectors
 - envoy.tracers.opentelemetry.samplers
 
